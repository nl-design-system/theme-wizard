---
import type { PageModule } from '@/types';

const { template, page } = Astro.params;
const modules = import.meta.glob<PageModule>('@templates/pages/**/*.astro', { eager: true });
const suffix = `/pages/${template}/${page}.astro`;
const key = Object.keys(modules).find((key) => key.endsWith(suffix));

const TemplatePage = key ? modules[key]?.default : undefined;

export function getStaticPaths() {
  type Path = {
    params: {
      template: string;
      page: string;
    };
  };

  const modules = import.meta.glob<PageModule>('@templates/pages/**/*.astro', { eager: true });
  const paths: Path[] = Object.keys(modules).flatMap((key) => {
    const match = key.match(/pages\/([^/]+)\/([^/]+)\.astro$/);
    let paths: Path[] = [];

    if (match) {
      paths = [
        {
          params: {
            template: match[1] /* my-environment */,
            page: match[2] /* overview */,
          },
        },
      ];
    } else {
      console.error(`Invalid path: ${key}`);
      paths = [];
    }
    return paths;
  });
  return paths;
}

if (!TemplatePage) return new Response(`Template page ${template}/${page} not found`, { status: 404 });
---

<TemplatePage />
