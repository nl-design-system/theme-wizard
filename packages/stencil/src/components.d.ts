/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ThemeWizardPreview {
        /**
          * @default DEFAULT_CONFIG.bodyFont
         */
        "bodyFontFamily": string;
        /**
          * @default DEFAULT_CONFIG.customCss
         */
        "customCss": string;
        /**
          * @default DEFAULT_CONFIG.headingFont
         */
        "headingFontFamily": string;
        /**
          * @default DEFAULT_CONFIG.themeClass
         */
        "themeClass": string;
        /**
          * @default DEFAULT_CONFIG.sourceUrl
         */
        "url": string;
    }
    interface ThemeWizardSidebar {
        /**
          * @default DEFAULT_CONFIG.bodyFont
         */
        "bodyFont": string;
        /**
          * @default DEFAULT_CONFIG.customCss
         */
        "customCss": string;
        /**
          * @default DEFAULT_CONFIG.headingFont
         */
        "headingFont": string;
        /**
          * @default DEFAULT_CONFIG.sourceUrl
         */
        "sourceUrl": string;
        /**
          * @default DEFAULT_CONFIG.themeClass
         */
        "themeClass": string;
    }
    interface ThemeWizardTypography {
        /**
          * @default DEFAULT_TYPOGRAPHY.bodyFont
         */
        "bodyFont": string;
        /**
          * @default DEFAULT_TYPOGRAPHY.headingFont
         */
        "headingFont": string;
    }
    interface ThemeWizardWrapper {
        /**
          * @default 'Hieronder zie je een live voorbeeld van de opgegeven website met de geselecteerde huisstijl.'
         */
        "pageDescription": string;
        /**
          * @default 'Live Voorbeeld'
         */
        "pageTitle": string;
    }
}
export interface ThemeWizardSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLThemeWizardSidebarElement;
}
export interface ThemeWizardTypographyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLThemeWizardTypographyElement;
}
declare global {
    interface HTMLThemeWizardPreviewElement extends Components.ThemeWizardPreview, HTMLStencilElement {
    }
    var HTMLThemeWizardPreviewElement: {
        prototype: HTMLThemeWizardPreviewElement;
        new (): HTMLThemeWizardPreviewElement;
    };
    interface HTMLThemeWizardSidebarElementEventMap {
        "configChange": Partial<typeof DEFAULT_CONFIG>;
    }
    interface HTMLThemeWizardSidebarElement extends Components.ThemeWizardSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLThemeWizardSidebarElementEventMap>(type: K, listener: (this: HTMLThemeWizardSidebarElement, ev: ThemeWizardSidebarCustomEvent<HTMLThemeWizardSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLThemeWizardSidebarElementEventMap>(type: K, listener: (this: HTMLThemeWizardSidebarElement, ev: ThemeWizardSidebarCustomEvent<HTMLThemeWizardSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLThemeWizardSidebarElement: {
        prototype: HTMLThemeWizardSidebarElement;
        new (): HTMLThemeWizardSidebarElement;
    };
    interface HTMLThemeWizardTypographyElementEventMap {
        "typographyChange": {
    [key: string]: string;
  };
    }
    interface HTMLThemeWizardTypographyElement extends Components.ThemeWizardTypography, HTMLStencilElement {
        addEventListener<K extends keyof HTMLThemeWizardTypographyElementEventMap>(type: K, listener: (this: HTMLThemeWizardTypographyElement, ev: ThemeWizardTypographyCustomEvent<HTMLThemeWizardTypographyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLThemeWizardTypographyElementEventMap>(type: K, listener: (this: HTMLThemeWizardTypographyElement, ev: ThemeWizardTypographyCustomEvent<HTMLThemeWizardTypographyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLThemeWizardTypographyElement: {
        prototype: HTMLThemeWizardTypographyElement;
        new (): HTMLThemeWizardTypographyElement;
    };
    interface HTMLThemeWizardWrapperElement extends Components.ThemeWizardWrapper, HTMLStencilElement {
    }
    var HTMLThemeWizardWrapperElement: {
        prototype: HTMLThemeWizardWrapperElement;
        new (): HTMLThemeWizardWrapperElement;
    };
    interface HTMLElementTagNameMap {
        "theme-wizard-preview": HTMLThemeWizardPreviewElement;
        "theme-wizard-sidebar": HTMLThemeWizardSidebarElement;
        "theme-wizard-typography": HTMLThemeWizardTypographyElement;
        "theme-wizard-wrapper": HTMLThemeWizardWrapperElement;
    }
}
declare namespace LocalJSX {
    interface ThemeWizardPreview {
        /**
          * @default DEFAULT_CONFIG.bodyFont
         */
        "bodyFontFamily"?: string;
        /**
          * @default DEFAULT_CONFIG.customCss
         */
        "customCss"?: string;
        /**
          * @default DEFAULT_CONFIG.headingFont
         */
        "headingFontFamily"?: string;
        /**
          * @default DEFAULT_CONFIG.themeClass
         */
        "themeClass"?: string;
        /**
          * @default DEFAULT_CONFIG.sourceUrl
         */
        "url"?: string;
    }
    interface ThemeWizardSidebar {
        /**
          * @default DEFAULT_CONFIG.bodyFont
         */
        "bodyFont"?: string;
        /**
          * @default DEFAULT_CONFIG.customCss
         */
        "customCss"?: string;
        /**
          * @default DEFAULT_CONFIG.headingFont
         */
        "headingFont"?: string;
        "onConfigChange"?: (event: ThemeWizardSidebarCustomEvent<Partial<typeof DEFAULT_CONFIG>>) => void;
        /**
          * @default DEFAULT_CONFIG.sourceUrl
         */
        "sourceUrl"?: string;
        /**
          * @default DEFAULT_CONFIG.themeClass
         */
        "themeClass"?: string;
    }
    interface ThemeWizardTypography {
        /**
          * @default DEFAULT_TYPOGRAPHY.bodyFont
         */
        "bodyFont"?: string;
        /**
          * @default DEFAULT_TYPOGRAPHY.headingFont
         */
        "headingFont"?: string;
        "onTypographyChange"?: (event: ThemeWizardTypographyCustomEvent<{
    [key: string]: string;
  }>) => void;
    }
    interface ThemeWizardWrapper {
        /**
          * @default 'Hieronder zie je een live voorbeeld van de opgegeven website met de geselecteerde huisstijl.'
         */
        "pageDescription"?: string;
        /**
          * @default 'Live Voorbeeld'
         */
        "pageTitle"?: string;
    }
    interface IntrinsicElements {
        "theme-wizard-preview": ThemeWizardPreview;
        "theme-wizard-sidebar": ThemeWizardSidebar;
        "theme-wizard-typography": ThemeWizardTypography;
        "theme-wizard-wrapper": ThemeWizardWrapper;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "theme-wizard-preview": LocalJSX.ThemeWizardPreview & JSXBase.HTMLAttributes<HTMLThemeWizardPreviewElement>;
            "theme-wizard-sidebar": LocalJSX.ThemeWizardSidebar & JSXBase.HTMLAttributes<HTMLThemeWizardSidebarElement>;
            "theme-wizard-typography": LocalJSX.ThemeWizardTypography & JSXBase.HTMLAttributes<HTMLThemeWizardTypographyElement>;
            "theme-wizard-wrapper": LocalJSX.ThemeWizardWrapper & JSXBase.HTMLAttributes<HTMLThemeWizardWrapperElement>;
        }
    }
}
